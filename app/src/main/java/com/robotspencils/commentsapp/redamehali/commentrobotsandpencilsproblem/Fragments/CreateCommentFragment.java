package com.robotspencils.commentsapp.redamehali.commentrobotsandpencilsproblem.Fragments;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.Button;

import com.robotspencils.commentsapp.redamehali.commentrobotsandpencilsproblem.R;
import com.robotspencils.commentsapp.redamehali.commentrobotsandpencilsproblem.activities.CommentActivity;
import com.robotspencils.commentsapp.redamehali.commentrobotsandpencilsproblem.db_models.CommentFirebaseDatabaseAccess;
import com.robotspencils.commentsapp.redamehali.commentrobotsandpencilsproblem.interfaces.RemoveFragmentListener;
import com.robotspencils.commentsapp.redamehali.commentrobotsandpencilsproblem.models.Comment;

import java.lang.ref.WeakReference;
import java.util.Calendar;

/**
 * Created by Reda Mehali on 10/13/18.
 *
 * Fragment Create comment class used to give the possibility
 * to the user to enter a comment in the autoEditTextView View
 * This fragment will be destroyed once the user validate a created comment
 *
 * * Project: Robots & Pencils Technical Problem
 */
public class CreateCommentFragment extends Fragment {

    private static final String TAG = "[" + CreateCommentFragment.class.getName() + "]=";
    private View createCommentFragmentView;
    private Context context;
    private Button writeCommentButton;
    private Button backButton;
    private AutoCompleteTextView saySomethingText;


    private Comment comment;
    private RemoveFragmentListener removeFragmentListener;

    @Override
    public void onAttach(Context context) {
        this.context = context;
        super.onAttach(context);

        try {
            removeFragmentListener = (RemoveFragmentListener) context;
        } catch (ClassCastException e) {
            throw new ClassCastException(context.toString() + " must implement onFragmentRemoved");
        }
    }

    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        if (createCommentFragmentView != null) {
            ViewGroup group = (ViewGroup) createCommentFragmentView.getParent();
            if (group != null) {
                group.removeView(createCommentFragmentView);
            }
        } else {

            createCommentFragmentView = inflater.inflate(R.layout.create_comment_fragment_layout, container, false);
            writeCommentButton = createCommentFragmentView.findViewById(R.id.writeCommentButton);
            backButton = createCommentFragmentView.findViewById(R.id.backButton);
            saySomethingText = createCommentFragmentView.findViewById(R.id.saySomethingText);

            //A mimic to create dummy data for the comment object.
            createDummyDataForComment();

            setUpForClickOnViewListeners();

        }
        return createCommentFragmentView;
    }

    /**
     * Method for setting up views that will be clicked or
     * receive interaction events from users.
     */
    private void setUpForClickOnViewListeners() {
        writeCommentButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // This method constructor will execute after an onClick
                // generated by a click from the user. For the sake of UI convenience, we will
                // have a fragment for user to enter their comments, and the main activity screen to
                // retrieve comments that have already been entered. It could also be
                // simple dialog to enter comments.
                new StoreCommentInDbTask(CreateCommentFragment.this, comment).execute();
            }
        });

        backButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ((CommentActivity) context).onBackPressed();
                Log.i(TAG, "back button was successfully clicked !");
            }
        });
    }

    /**
     * Dummy Data for Comment object created in the
     * onCreate method for the sake of the example
     */
    private void createDummyDataForComment() {
        comment = new Comment();
        //TODO In a real life example, we will retrieve the string url and the user name from the database.
        //TODO  The user will have to go through a sign up screen before getting to this fragment.
        //TODO  While going through the sign up screen, the user will be asked to provide his/her user name and photo.
        //TODO  We will convert that photo to a url string and the user name to a string and store it in the database.
        //TODO  Then, we will provide the user the possibility to write his/her own comment through an EditText or
        //TODO  AutoCompleteTextView in this fragment that is found
        //TODO  post sign up. We will also retrieve the current time at what time the comment was created.
        //TODO  Finally, we will use all that data and store in the comment object and send it to the database where comments
        //TODO  are stored.

        comment.setUserName("This is Robots & Pencils");
        comment.setCommentPostedDate(Calendar.getInstance().getTimeInMillis());
        comment.setUserPhotoUrl("Robot_url_photo");
        comment.setCommentText(saySomethingText.getText().toString());
    }

    /**
     * The AsyncTask class serves as a background thread in order to not block the
     * main thread when a user enters a comment and we want to send that comment to
     * the server. Also, it's a static class but in the same time, it executes some
     * variables that may create memory leakage. In order to fix this issue, we used
     * a weak reference to avoid memory leaks of those data variables or objects.
     *
     * @method doInBackground stores data by sending the comment object to our firebase
     * remote server store.
     *
     * @method onPostExecute remove the current fragment by triggering an interface
     * that will be called on the Comment Main Activity.
     */

    private static class StoreCommentInDbTask extends AsyncTask<Void, Void, Void> {

        WeakReference<CreateCommentFragment> commentFragmentWeakReference;
        Comment comment;

        StoreCommentInDbTask(CreateCommentFragment createCommentFragment, Comment comment) {
            this.commentFragmentWeakReference = new WeakReference<>(createCommentFragment);
            this.comment = comment;
        }

        @Override
        protected Void doInBackground(Void... voids) {
            if (commentFragmentWeakReference.get() != null) {
                CommentFirebaseDatabaseAccess.onStoreDataInFirebaseDatabase(comment);
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            if (commentFragmentWeakReference.get() != null)
                commentFragmentWeakReference.get().removeFragmentListener.onFragmentRemoved();
        }
    }
}
